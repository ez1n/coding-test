/**
 * Lv.2 [3차] 파일명 정렬
 *
 * 무지는 단순한 문자 코드 순이 아닌, 파일명에 포함된 숫자를 반영한 정렬 기능을 저장소 관리 프로그램에 구현하기로 했다.
 * 소스 파일 저장소에 저장된 파일명은 100 글자 이내로, 영문 대소문자, 숫자, 공백(" "), 마침표("."), 빼기 부호("-")만으로 이루어져 있다.
 * 파일명은 영문자로 시작하며, 숫자를 하나 이상 포함하고 있다.
 * 파일명은 크게 HEAD, NUMBER, TAIL의 세 부분으로 구성된다.
 *
 * HEAD는 숫자가 아닌 문자로 이루어져 있으며, 최소한 한 글자 이상이다.
 * NUMBER는 한 글자에서 최대 다섯 글자 사이의 연속된 숫자로 이루어져 있으며, 앞쪽에 0이 올 수 있다. 0부터 99999 사이의 숫자로, 00000이나 0101 등도 가능하다.
 * TAIL은 그 나머지 부분으로, 여기에는 숫자가 다시 나타날 수도 있으며, 아무 글자도 없을 수 있다.
 *
 * 파일명을 세 부분으로 나눈 후, 다음 기준에 따라 파일명을 정렬한다.
 *
 * 파일명은 우선 HEAD 부분을 기준으로 사전 순으로 정렬한다.
 * 이때, 문자열 비교 시 대소문자 구분을 하지 않는다.
 * 파일명의 HEAD 부분이 대소문자 차이 외에는 같을 경우, NUMBER의 숫자 순으로 정렬한다. 9 < 10 < 0011 < 012 < 13 < 014 순으로 정렬된다.
 * 숫자 앞의 0은 무시되며, 012와 12는 정렬 시에 같은 같은 값으로 처리된다.
 * 두 파일의 HEAD 부분과, NUMBER의 숫자도 같을 경우, 원래 입력에 주어진 순서를 유지한다.
 *
 * 무지를 도와 파일명 정렬 프로그램을 구현하라.
 *
 */

function solution(files) {
  files.sort((a, b) => {
    const headA = a.match(/^[a-z||\.\-\s]+/i)[0].toLowerCase();
    const headB = b.match(/^[a-z||\.\-\s]+/i)[0].toLowerCase();

    if (headA < headB) return -1;
    if (headB < headA) return 1;

    const numberA = a.match(/\d+/)[0];
    const numberB = b.match(/\d+/)[0];

    return numberA - numberB;
  });

  return files;
}
